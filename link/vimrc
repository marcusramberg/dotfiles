set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'airblade/vim-gitgutter'
Bundle 'gosukiwi/vim-atom-dark'
Bundle 'benmills/vimux'
Bundle 'bling/vim-airline'
Bundle 'pearofducks/ansible-vim'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'csexton/jekyll.vim'
"Bundle 'edkolev/tmuxline.vim'
"Bundle 'fatih/vim-go'
Bundle 'glench/Vim-Jinja2-Syntax'
Bundle 'gmarik/vundle'
Bundle 'godlygeek/tabular'
Bundle 'honza/vim-snippets'
Bundle 'jazzCore/ctrlp-cmatcher'
Bundle 'ctrlp/ctrlp.vim'
Bundle 'majutsushi/tagbar'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'mattn/gist-vim'
Bundle 'mattn/webapi-vim'
Bundle 'ngmy/vim-rubocop'
Bundle 'othree/html5.vim'
Bundle 'klen/python-mode'
Bundle 'pangloss/vim-javascript'
Bundle 'rizzatti/dash.vim'
Bundle 'rizzatti/funcoo.vim'
Bundle 'mileszs/ack.vim'
Bundle 'scrooloose/syntastic'
Bundle 'sirVer/ultisnips'
Bundle 'spllr/vim-padrino'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'tomtom/tlib_vim'
Bundle 'tomtom/vimtlib'
Bundle 'tonchis/vim-to-github'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-endwise'
Bundle 'lambdalisue/vim-gita'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-commentary'
Bundle 'Valloric/YouCompleteMe'
Bundle 'vim-pandoc/vim-pandoc'
Bundle 'hokaccha/vim-prove'
Bundle 'vim-pandoc/vim-pandoc-syntax' 
Bundle 'vim-perl/vim-perl'
Bundle 'vim-ruby/vim-ruby'
Bundle 'vim-scripts/rcs.vim'
"Bundle 'vitalk/vim-simple-todo'
"Bundle 'wting/rust.vim'
Bundle 'yko/mojo.vim' 
Bundle 'mivok/vimtodo'
Bundle 'zah/nimrod.vim'


set t_Co=256
colorscheme atom-dark-256
 
filetype plugin indent on
 
syntax on
set number
set mouse=
set mousehide

set hlsearch
set showmatch
set incsearch
set ignorecase
set autoindent
set history=1000
set cursorline
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set clipboard=unnamed
set directory=/tmp
set pastetoggle=<leader>v

set statusline=%<\ %n:%f\ %m%r%y%=%-35.(line:\ %l\ of\ %L,\ col:\ %c%V\ (%P)%)

" Airline
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1
set background=dark
"let g:airline_theme = 'solarized'

let g:tagbar_left = 1
let g:tagbar_sort = 0
let g:tagbar_autoshowtag = 1
let g:tagbar_autoclose = 1
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
let g:tagbar_width = 30 
let g:tagbar_foldlevel = 2

let g:vim_markdown_folding_disabled=1
let g:pymode_folding = 0

let g:jekyll_path = "~/Source/blog"
let g:syntastic_javascript_checkers = ['jsxhint']
let g:pandoc#modules#disabled = ["folding"]
"let g:pandoc#formatting#mode = 'ha'
let g:pandoc#formatting#textwidth = 79


autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1 
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd BufNewFile,BufReadPost *.go set filetype=go
autocmd FileType go compiler go
autocmd FileType go autocmd BufWritePre <buffer> Fmt
au BufRead,BufNewFile *.md,*.markdown setlocal textwidth=79 wrap linebreak nolist




if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
endif 


:nmap <leader>a :Ack 
:nmap <silent> <leader>d <Plug>DashGlobalSearch
:nmap <silent> <leader>p :TagbarToggle<cr>
:nmap <silent> <leader>n :cnext<cr>
nnore <esc><esc> :let @/ = ""<cr>

:nmap <silent> <leader>; :CtrlPMRU<cr>
:nmap ; :CtrlPBuffer<cr>
let g:ctrlp_match_window = 'top,order:ttb,min:1,max:10,results:10'
let g:ctrlp_switch_buffer = 0
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_working_path_mode = 2


if $TERM_PROGRAM =~ "iTerm"
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

let g:UltiSnipsExpandTrigger ="<Leader><Tab>"
let g:UltiSnipsJumpForwardTrigger="<Leader><Tab>"
let g:UltiSnipsJumpBackwardTrigger="<Leader><s-Tab>"

" Tab navigation
let g:lasttab = 1
nnoremap tt :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
nnoremap tn :tabnew<CR>
nnoremap tj  :tabfirst<CR>
nnoremap tl  :tabnext<CR>
nnoremap th  :tabprev<CR>
nnoremap tk  :tablast<CR>
nnoremap te  :tabedit<space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
map <space> viw

" Fugitive bindings
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gp :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Dispatch! git push<CR>
nnoremap <space>gpl :Dispatch! git pull<CR>


command! Fuck w !sudo tee % >/dev/null

noremap <C-_> :call AckSearch()<CR>
 
function! AckSearch()
  let a:top_level = split(expand("%"), "/")
  let a:query = getline("'<")
  let a:start = getpos("'<")[2]
  let a:stop = getpos("'>")[2]
 
  if a:start == a:stop
    let a:query = expand("<cword>")
  else
    let a:query = a:query[a:start - 1: a:stop - 1]
  endif
 
  call ack#Ack("grep!", a:query . " " . a:top_level[0])
endfunction

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

let g:ansible_extra_syntaxes = "sh.vim perl.vim"

:autocmd BufRead,BufNewFile /Users/marcus/Source/_rg/* setlocal tabstop=4 shiftwidth=4

command -range=% -nargs=* Tidy <line1>,<line2>!
  \perltidy <args>
