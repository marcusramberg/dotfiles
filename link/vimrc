call plug#begin()

" <3 FZF
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" Syntax
Plug 'sheerun/vim-polyglot'
Plug 'burner/vim-svelte'
Plug 'elzr/vim-json'
Plug 'w0rp/ale'
Plug 'kristijanhusak/orgmode.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Search/replace
Plug 'Olical/vim-enmasse'
Plug 'jremmen/vim-ripgrep'

" Extend editing
Plug 'adelarsq/vim-matchit'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" Version Control
Plug 'nvim-lua/plenary.nvim'
Plug 'TimUntersberger/neogit'
Plug 'sindrets/diffview.nvim'

" Navigation
Plug 'bogado/file-line'

"Autocomplete

Plug 'neovim/nvim-lspconfig'

Plug 'nvim-lua/completion-nvim'
Plug 'nvim-lua/popup.nvim'
Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
" 9000+ Snippets
Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}
Plug 'ms-jpq/coq.thirdparty', {'branch': '3p'}

" Styling
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'dracula/vim'
Plug 'folke/which-key.nvim'
Plug 'b0o/mapx.nvim'

call plug#end()

:let mapleader = "\<Space>"
colorscheme dracula

syntax on


" Always use clipboard
set clipboard+=unnamedplus
set cmdheight=2
" Nevertabs
set expandtab
" Smart casing
set ignorecase
set smartcase
" Hide abbandoned buffers
set hidden
set history=1000
" Be smart about command casing
set infercase
set mouse=a
set number
set pastetoggle=<leader>v
" Let's try without 
"set completeopt=menuone,noselect

" Don't kill ourself on long lines
set synmaxcol=250
set shiftwidth=2
" Matching brackets
set showmatch
" Always show
set signcolumn=yes
set softtabstop=2
set tabstop=2
"set updatetime=300
"set wildmenu
"set wildmode=full

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'dracula'
let g:airline#extensions#tabline#show_buffers = 0


let g:pymode_folding = 0

let g:vim_markdown_fenced_languages = ['js=javascript']

let g:coq_settings = { 'auto_start': 'shut-up' }

"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" backspace
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

let mojo_highlight_data = 1
let g:ale_linters = { 'perl': ['perl'], 'javascript': ['prettier'],  }
let g:ale_lint_delay = 2000
let g:ale_sign_warning = '⊙'
let g:ale_sign_error = '⊘'
let g:ale_yaml_yamllint_options = '-d "{extends: default, rules: {line-length: disable, indentation: { indent-sequences: whatever}}}"'


augroup autoSaveAndRead
    autocmd!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall
    autocmd CursorHold * silent! checktime
augroup END

filetype plugin indent on

" Autobalance after window resize
autocmd VimResized * wincmd =

" Ruby
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

"Go
autocmd BufNewFile,BufReadPost *.go set filetype=go
autocmd FileType go compiler go
autocmd BufWritePre *.go lua vim.lsp.buf.formatting()
autocmd BufNewFile,BufRead *.tt setf tt2
autocmd BufEnter,TabEnter,WinEnter * syn match ErrorMsg /[^\x00-\x7F]/
autocmd BufEnter,TabEnter,WinEnter * syn match ErrorMsg /\s\+$/
au BufRead,BufNewFile *.md,*.markdown setlocal tw=79 fo+=tv



if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
endif


":nmap <leader>gs :Neogit<cr>
:nmap <leader>a :Rg
":nmap <silent> <leader>d <Plug>DashGlobalSearch
nmap <leader>n <Plug>(ale_next_wrap)
nnore <esc><esc> :let @/ = ""<cr>

" for tmux in iterm
if $TERM_PROGRAM =~ "iTerm"
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif

" let g:UltiSnipsExpandTrigger ="<Leader><Tab>"
" let g:UltiSnipsJumpForwardTrigger="<Leader><Tab>"
" let g:UltiSnipsJumpBackwardTrigger="<Leader><s-Tab>"

" Tab navigation
let g:lasttab = 1
nnoremap tt :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


command! Fuck w !sudo tee % >/dev/null

noremap <Leader>A :Rg <cword><cr>

let g:ansible_extra_syntaxes = "sh.vim perl.vim"

:autocmd BufRead,BufNewFile /Users/marcus/Source/DNB/* call SetDnbOptions()
:autocmd BufRead,BufNewFile /Users/marcus/Source/DNB/infra-templates/* call SetDnbInfraOptions()

function! SetDnbOptions()
  setlocal tabstop=4 shiftwidth=4
endfunction

function! SetDnbInfraOptions()
  let g:ale_linter_aliases = {'yaml': ['cloudformation', 'yaml']}
endfunction

"define :Tidy command to run perltidy on visual selection || entire buffer"
command! -range=% -nargs=* Tidy <line1>,<line2>!LC_CTYPE=C LANG=C perltidy

"run :Tidy on entire buffer and return cursor to (approximate) original position"
function! DoTidy()
    let l = line(".")
    let c = col(".")
    :Tidy
    call cursor(l, c)
endfun

"shortcut for normal mode to run on entire buffer then return to current line"
au Filetype perl nmap <Leader>t :call DoTidy()<CR>
au Filetype rust nmap <Leader>t :call RustFmt()<CR>

"shortcut for visual mode to run on the the current visual selection"
au Filetype perl vmap <Leader>t :Tidy<CR>

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
set termguicolors

let g:rustfmt_autosave = 1
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)

" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

autocmd FileType yaml setl indentkeys-=<:>

" Fix parens match to look correctly.
hi! MatchParen cterm=NONE,bold gui=NONE,bold  guibg=#5e5855 guifg=NONE

" Perl syntax settings
let perl_include_pod=1
let perl_no_subprototype_error=1
let perl_sub_signatures=1

" Make mouse clicks a NOOP;
nnoremap <LeftMouse> ma<LeftMouse>`
tnoremap <Leader><Esc> <C-\><C-n>

auto BufEnter * :set title
" Strip gui
set guioptions=

set list          " Display unprintable characters f12 - switches
set listchars=tab:•\ ,trail:•,extends:»,precedes:« " Unprintable chars mapping

nnoremap <C-p> :FZF<Cr>

lua require('space-menu')
lua require('lsp-config')

