set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


Bundle 'kien/ctrlp.vim'
Bundle 'JazzCore/ctrlp-cmatcher'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'Shougo/deoplete.nvim'
Bundle 'airblade/vim-gitgutter'
Bundle 'othree/eregex.vim'
Bundle 'arcticicestudio/nord-vim'
Bundle 'benmills/vimux'
Bundle 'bling/vim-airline'
Bundle 'bronson/vim-trailing-whitespace'
Bundle 'c9s/perlomni.vim'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'csexton/jekyll.vim'
Bundle 'elzr/vim-json'
Bundle 'ervandew/supertab'
Bundle 'fgsch/vim-varnish'
Bundle 'glench/Vim-Jinja2-Syntax'
Bundle 'gmarik/vundle'
Bundle 'godlygeek/tabular'
Bundle 'hokaccha/vim-prove'
Bundle 'honza/vim-snippets'
Bundle 'hotchpotch/perldoc-vim'
Bundle 'janko-m/vim-test'
Bundle 'joshukraine/yankmatches'
Bundle 'junegunn/fzf'
Bundle 'junegunn/fzf.vim'
Bundle 'junegunn/goyo.vim'
Bundle 'klen/python-mode'
Bundle 'lambdalisue/gina.vim'
Bundle 'madzak/vim-proselint'
Bundle 'majutsushi/tagbar'
Bundle 'marcusramberg/codi.vim'
Bundle 'mattn/gist-vim'
Bundle 'mattn/webapi-vim'
Bundle 'mileszs/ack.vim'
Bundle 'mivok/vimtodo'
Bundle 'ngmy/vim-rubocop'
Bundle 'rizzatti/funcoo.vim'
Bundle 'sheerun/vim-polyglot'
Bundle 'sirVer/ultisnips'
Bundle 'spllr/vim-padrino'
Bundle 'sunaku/vim-dasht'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'tmhedberg/matchit'
Bundle 'tomtom/tlib_vim'
Bundle 'tomtom/vimtlib'
Bundle 'tonchis/vim-to-github'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-surround'
Bundle 'w0rp/ale'
Bundle 'yko/mojo.vim'
Bundle 'zah/nimrod.vim'

let g:nord_italic_comments = 1
colorscheme nord


filetype plugin indent on

syntax on

set autoindent
set autoread
set background=dark
set clipboard=unnamed
set cursorline
set directory=/tmp
set expandtab
set noshowmode
set ignorecase
set smartcase
set hidden
set history=1000
set hlsearch
set incsearch
set infercase
set magic
set mouse=a
set clipboard=unnamed
set mousehide
set number
set pastetoggle=<leader>v
set relativenumber
set synmaxcol=250
set shiftwidth=2
"set showmatch
set softtabstop=2
set statusline=%<\ %n:%f\ %m%r%y%=%-35.(line:\ %l\ of\ %L,\ col:\ %c%V\ (%P)%)
set tabstop=2
set wildmenu
set wildmode=full


" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'nord'
let g:airline#extensions#tagbar#enabled = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''


let g:tagbar_left = 1
let g:tagbar_sort = 0
let g:tagbar_autoshowtag = 1
let g:tagbar_autoclose = 1
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
let g:tagbar_width = 30
let g:tagbar_foldlevel = 2

let g:vim_markdown_folding_disabled=1
let g:pymode_folding = 0

let g:jekyll_path = "~/Source/blog"
let g:syntastic_javascript_checkers = ['jsxhint']
"let g:pandoc#modules#disabled = ["folding"]
"let g:pandoc#formatting#mode = 'ha'
"let g:pandoc#formatting#textwidth = 79
let g:deoplete#enable_at_startup = 1
let g:SuperTabDefaultCompletionType = "context"
let mojo_highlight_data = 1
let g:ale_linters = { 'perl': ['perl'], }
let g:ale_sign_warning = '⊙'
let g:ale_sign_error = '⊘'
let g:ale_yaml_yamllint_options = '-d "{extends: default, rules: {line-length: disable, indentation: { indent-sequences: whatever}}}"'


augroup autoSaveAndRead
    autocmd!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall
    autocmd CursorHold * silent! checktime
augroup END

autocmd VimResized * wincmd =
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd BufNewFile,BufReadPost *.go set filetype=go
autocmd FileType go compiler go
autocmd FileType go autocmd BufWritePre <buffer> GoFmt
autocmd BufNewFile,BufRead *.tt setf tt2
autocmd BufEnter,TabEnter,WinEnter * syn match ErrorMsg /[^\x00-\x7F]/
autocmd BufEnter,TabEnter,WinEnter * syn match ErrorMsg /\s\+$/
au BufRead,BufNewFile *.md,*.markdown setlocal textwidth=79 wrap linebreak nolist




if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
endif 


:nmap <leader>a :Ack 
:nmap <silent> <leader>d <Plug>DashGlobalSearch
:nmap <silent> <leader>p :TagbarToggle<cr>
:nmap <silent> <leader>n :<Plug>(ale_next_wrap)
nnore <esc><esc> :let @/ = ""<cr>

" Ctrl-p settings
:nmap <silent> <leader>; :CtrlPMRUFile<cr>
:nmap ; :CtrlPBuffer<cr>
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_open_multiple_files = 'tj'
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_working_path_mode = 2
"let g:ctrlp_cmd = 'CtrlPMRUFile'
  let g:ctrlp_mruf_relative = 1



if $TERM_PROGRAM =~ "iTerm"
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

let g:UltiSnipsExpandTrigger ="<Leader><Tab>"
let g:UltiSnipsJumpForwardTrigger="<Leader><Tab>"
let g:UltiSnipsJumpBackwardTrigger="<Leader><s-Tab>"

" Tab navigation
let g:lasttab = 1
nnoremap tt :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
nnoremap tn :tabnew<CR>
nnoremap tj  :tabfirst<CR>
nnoremap tl  :tabnext<CR>
nnoremap th  :tabprev<CR>
nnoremap tk  :tablast<CR>
nnoremap te  :tabedit<space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
map <space> viw


command! Fuck w !sudo tee % >/dev/null

noremap <C-_> :call AckSearch()<CR>
 
function! AckSearch()
  let a:top_level = split(expand("%"), "/")
  let a:query = getline("'<")
  let a:start = getpos("'<")[2]
  let a:stop = getpos("'>")[2]
 
  if a:start == a:stop
    let a:query = expand("<cword>")
  else
    let a:query = a:query[a:start - 1: a:stop - 1]
  endif
 
  call ack#Ack("grep!", a:query . " " . a:top_level[0])
endfunction

if executable('rg')
    let g:ackprg = 'rg --vimgrep --no-heading'
endif

let g:ansible_extra_syntaxes = "sh.vim perl.vim"

:autocmd BufRead,BufNewFile /home/marcus/Source/_rg/* call SetRgOptions()

function SetRgOptions()
  let g:syntastic_enable_perl_checker = 1
  setlocal tabstop=2 shiftwidth=2
  let g:syntastic_perl_lib_path = [ "./lib", "./lib/auto", "/home/marcus/Source/_rg/libraries/lib" ]
  let g:syntastic_perl_args_after = '--quiet --nocolor --verbose "\%s:\%f:\%l:\%c:(\%s) \%m (\%e)\n" -p ~/Source/_rg/libraries/.perlcriticrc'
  let g:syntastic_perl_checkers = ['perl','perlcritic']
endfunction

"define :Tidy command to run perltidy on visual selection || entire buffer"
command -range=% -nargs=* Tidy <line1>,<line2>!perltidy

"run :Tidy on entire buffer and return cursor to (approximate) original position"
fun DoTidy()
    let l = line(".")
    let c = col(".")
    :Tidy
    call cursor(l, c)
endfun

"shortcut for normal mode to run on entire buffer then return to current line"
au Filetype perl nmap <Leader>t :call DoTidy()<CR>

"shortcut for visual mode to run on the the current visual selection"
au Filetype perl vmap <Leader>t :Tidy<CR>

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


" OS X-like space bar to scroll.
nnoremap <Space> <C-F>


"#nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>A :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

"let test#strategy="neovim"

let g:acp_enableAtStartup = 0


let g:rustfmt_autosave = 1
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)


"
let g:acp_enableAtStartup = 0
" Use neocomplete.
"let g:neocomplete#enable_at_startup = 1
" Use smartcase.
"let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
"let g:neocomplete#sources#syntax#min_keyword_length = 3

"let g:neocomplete#sources#dictionary#dictionaries = {
"    \ 'default' : '',
"    \ 'vimshell' : $HOME.'/.vimshell_hist',
"    \ 'scheme' : $HOME.'/.gosh_completions'
"        \ }
"noremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
"  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
"  " For no inserting <CR> key.
"  "return pumvisible() ? "\<C-y>" : "\<CR>"
"endfunction
"" <TAB>: completion.
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<C-R>=UltiSnips#ExpandSnippet()"

" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"let g:UltiSnipsExpandTrigger="<tab>"
"
nnoremap <silent> <Leader>d :call Dasht([expand('<cword>'), expand('<cWORD>')])<Return>
nnoremap <Leader>D :Dasht<Space>


"noremap <C-p> :FZF<cr>
"noremap <C-P> :FZF<cr>
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

hi! MatchParen cterm=NONE,bold gui=NONE,bold  guibg=#5e5855 guifg=NONE
let perl_sub_signatures = 1

