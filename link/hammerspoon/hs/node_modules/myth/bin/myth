#!/usr/bin/env node

var fmt = require('util').format;
var fs = require('fs');
var exists = fs.existsSync;
var logger = require('./logger');
var myth = require('..');
var path = require('path');
var resolve = path.resolve;
var program = require('commander');
var read = require('read-file-stdin');
var slug = require('to-slug-case');
var space = require('to-space-case');
var watch = require('node-watch');
var write = require('write-file-stdout');

/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('[<input>] [<output>]')
  .option('-c, --compress', 'compress output')
  .option('-i, --ignore-errors', 'ignore complilation errors', false)
  .option('-s, --sourcemap', 'add source map')
  .option('-v, --verbose', 'log verbose output for debugging\n')
  .option('-w, --watch', 'watch the input file for changes');

myth.features.forEach(function(feature){
  var flag = fmt('--no-%s', slug(feature));
  var desc = fmt('disable %s support', space(feature));
  program.option(flag, desc);
});

/**
 * Examples.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # pass an input and output file:');
  console.log('    $ myth input.css output.css');
  console.log();
  console.log('    # watch the input file for changes:');
  console.log('    $ myth --watch input.css output.css');
  console.log();
  console.log('    # unix-style piping to stdin and stdout:');
  console.log('    $ cat input.css | myth | grep background-color');
  console.log();
});

/**
 * Parse.
 */

program.parse(process.argv);

/**
 * Settings.
 */

var input = program.args[0] ? resolve(program.args[0]) : null;
var output = program.args[1] ? resolve(program.args[1]) : null;
var verbose = program.verbose;
var regen = program.watch && input && output;
var ignore = program.ignoreErrors;

/**
 * Exists?
 */

if (input && !exists(input)) logger.fatal('not found', input);

/**
 * Run.
 */

run();

/**
 * Watch?
 */

if (regen) {
  watch(input, run);
  if (verbose) logger.log('watch', input);
}

/**
 * Run for the given input and output.
 */

function run(){
  read(input, function(err, buffer){
    if (err) logger.throw(err);
    var css = buffer.toString();

    try {
      css = myth(css, {
        compress: program.compress,
        sourcemap: program.sourcemap,
        features: program,
        source: input
      });
    } catch (e) {
      if (ignore) {
        return;
      } else {
        e.css = css;
        logger.throw(e);
      }
    }

    write(output, css);
    if (verbose && output) logger.log('write', output);
  });
}
